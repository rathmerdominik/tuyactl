#!/usr/bin/env python
"""
Usage:
  tuyactl <device> color [<single-hex>]
  tuyactl <device> brightness [<brightness>]
  tuyactl <device> temp [<temp>]
  tuyactl <device> switch [<state>]
  tuyactl <device> mode <mode>
  tuyactl <device> scene <scene-no>
  tuyactl <device> white <brightness> <temp>
  tuyactl <device> whiteper <whiteper>
  tuyactl <device> colorper <colorper>
  tuyactl <device> slow [-i] <wait> <slow-hex>...
  tuyactl <device> breathing [-i] <wait> <offtime> <slow-hex>...

Options:
  -i, --infinite  loop indefinitely
"""

import tinytuya
from docopt import docopt
import os
from pathlib import Path
import configparser
import json
import time

class Device:
    def __init__(self, id, ip, key):
        self.id = id
        self.ip = ip
        self.key = key

class Config:
    devices = {}

    def __init__(self):
        self.paths = [
            Path.home() / ".config" / "tuyactl" / "devices.ini",
            Path("/etc") / "tuyactl" / "devices.ini",
        ]

        xdg_config_home = os.getenv("XDG_CONFIG_HOME")
        if xdg_config_home is not None:
            self.paths.insert(0, Path(xdg_config_home) / "tuyactl" / "devices.ini")

        self.path = self.search_path()

    def search_path(self):
        config_path = None
        for path in self.paths:
            if os.path.exists(path):
                config_path = path

        if config_path is None:
            raise Exception("No config file found")

        self.path = config_path
        return config_path

    def parse(self):
        config = configparser.ConfigParser()
        config.read(self.path)

        for name in config.sections():
            current = config[name]
            self.devices[name] = Device(current["id"], current["ip"], current["key"])

#Those are reimplementations of the "Smart Life" App
class Transitions:

    @staticmethod
    def slow(device, wait, colors, infinite):
        while True:
            for color in colors: 
                r, g, b = bytes.fromhex(color)      
                device.set_colour(r, g ,b)
                time.sleep(float(wait))
            if not infinite:
                break
    @staticmethod
    def breathing(device, wait, colors, offtime, infinite):
        while True:
            for color in colors:
                device.turn_on()
                r, g, b = bytes.fromhex(color)      
                device.set_colour(r, g ,b)
                time.sleep(float(wait))
                device.turn_off()
                time.sleep(float(offtime))
            if not infinite:
                break
    @staticmethod
    def fast(device, colors):
        #Not possible for now. See this for reference https://github.com/jasonacox/tinytuya/issues/29
        pass
              
if __name__ == "__main__":
    arguments = docopt(__doc__)
    cfg = Config()
    cfg.parse()
    current = cfg.devices[arguments["<device>"]]
    dev = tinytuya.BulbDevice(current.id, current.ip, current.key)
    dev.set_version(3.3)
    if arguments["switch"]:
        if arguments["<state>"]:
            if arguments["<state>"] == "on":
                dev.turn_on()
            elif arguments["<state>"] == "off":
                dev.turn_off()
            else:
                raise Exception("Switching is only possible with \"on\" or \"off\"")
        else:
            print("on" if dev.state()["is_on"] else "off")          

    if arguments["color"]:
        if not arguments["<single-hex>"]:           
            print('%02x%02x%02x' % dev.colour_rgb())
        else:
            r, g, b = bytes.fromhex(arguments["<single-hex>"])
            dev.set_colour(r, g ,b)

    if arguments["brightness"]:
        if not arguments["brightness"]:
            print(dev.brightness())
        else:
            dev.set_brightness(int(arguments["<brightness>"]))

    if arguments["temp"]:
        if not arguments["brightness"]:
            print(dev.brightness())
        else:
            dev.set_colourtemp(int(arguments["<temp>"]))

    if arguments["white"]:
        dev.set_white(int(arguments["<brightness>"]), int(arguments["<temp>"]))

    if arguments["whiteper"]:
        dev.set_white_percentage(int(arguments["<whiteper>"]))

    if arguments["colorper"]:
        dev.set_colourtemp_percentage(int(arguments["<colorper>"]))

    #Mode and Scene are experimental. Some Features may not apply to your Device.
    if arguments["mode"]:
        dev.set_mode(mode=arguments["<mode>"])

    if arguments["scene"]:
        dev.set_scene(int(arguments["<scene-no>"]))

    if arguments["slow"]:
        Transitions.slow(dev, arguments["<wait>"], arguments["<slow-hex>"], arguments["--infinite"])
    
    if arguments["breathing"]:
        Transitions.breathing(dev, arguments["<wait>"], arguments["<slow-hex>"], arguments["<offtime>"], arguments["--infinite"])
    
    #Not accessible for now
    #if arguments["fast"]:
    #    Transitions.fast(dev, arguments["<fast-hex>"])


    
        
